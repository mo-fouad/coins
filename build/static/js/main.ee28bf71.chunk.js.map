{"version":3,"sources":["components/Cryptocurrency.js","components/Tickers.js","App.js","serviceWorker.js","index.js"],"names":["TickerItem","styled","div","_templateObject","Cryptocurrency","_this$props$data","this","props","data","name","id","symbol","price_usd","percent_change_1h","percent_change_24h","percent_change_7d","react_default","a","createElement","toFixed","Component","TickerCont","Tickers_templateObject","Tickeritems","_templateObject2","Footer","_templateObject3","Tickers","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetchCryptocurrencyData","interval","setInterval","_this3","axios","get","then","response","wanted","result","filter","currency","includes","setState","catch","err","console","log","tickers","map","coine","Cryptocurrency_Cryptocurrency","key","href","Header","App_templateObject","App","className","Tickers_Tickers","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iYAGA,IAAMA,EAAaC,IAAOC,IAAVC,KAQKC,mLACV,IAAAC,EASHC,KAAKC,MAAMC,KANXC,GAHGJ,EAEHK,GAFGL,EAGHI,MACAE,EAJGN,EAIHM,OACAC,EALGP,EAKHO,UACAC,EANGR,EAMHQ,kBACAC,EAPGT,EAOHS,mBACAC,EARGV,EAQHU,kBAIJ,OACEC,EAAAC,EAAAC,cAAClB,EAAD,KACMgB,EAAAC,EAAAC,cAAA,SAAIT,EAAJ,KAAYE,EAAZ,KACAK,EAAAC,EAAAC,cAAA,gBAASN,GAAWO,QAAQ,IAC5BH,EAAAC,EAAAC,cAAA,SAAIL,EAAJ,SACAG,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,WACAE,EAAAC,EAAAC,cAAA,SAAIH,EAAJ,mBAnBgCK,6WCN5C,IAAMC,EAAapB,IAAOC,IAAVoB,KAGVC,EAActB,IAAOC,IAAVsB,KAMXC,EAASxB,IAAOC,IAAVwB,KAMSC,cACjB,SAAAA,EAAYpB,GAAM,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMC,KACD2B,MAAQ,CACT1B,KAAK,CACD,CACIE,GAAI,UACJD,KAAM,UACNE,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAEvB,CACIL,GAAI,WACJD,KAAM,WACNE,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAEvB,CACIL,GAAI,WACJD,KAAM,WACNE,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,OA7BjBa,mFAqCE,IAAAO,EAAA7B,KAChBA,KAAK8B,0BACL9B,KAAK+B,SAAWC,YAAY,kBAAMH,EAAKC,2BAA2B,uDAI5C,IAAAG,EAAAjC,KACtBkC,IAAMC,IAAI,4CACLC,KAAK,SAAAC,GACF,IAAIC,EAAS,CAAC,UAAW,WAAY,YACjCC,EAASF,EAASnC,KAAKsC,OAAO,SAAAC,GAAQ,OAAIH,EAAOI,SAASD,EAASrC,MACvE6B,EAAKU,SAAS,CAAEzC,KAAMqC,MAEzBK,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAMhC,IAAIG,EAAUhD,KAAK4B,MAAM1B,KAAK+C,IAAI,SAACC,GAAD,OAC5BxC,EAAAC,EAAAC,cAACuC,EAAD,CAAgBjD,KAAOgD,EAAQE,IAAKF,EAAM9C,OAElD,OACEM,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACK,EAAD,KACK+B,GAELtC,EAAAC,EAAAC,cAACO,EAAD,kCAC4BT,EAAAC,EAAAC,cAAA,KAAGyC,KAAK,wDAAR,iBAlECvC,iNCjBrC,IAAMwC,EAAS3D,IAAOC,IAAV2D,KAwBGC,mLAbX,OACE9C,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAAC0C,EAAD,CAASG,UAAU,cACjB/C,EAAAC,EAAAC,cAAA,uCAGFF,EAAAC,EAAAC,cAAC8C,EAAD,cARU5C,aCAE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.ee28bf71.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst TickerItem = styled.div`\n    flex:1;\n    text-align:center;\n    padding: 10px;\n    margin:10px;\n    background:#eee;\n`;\n\nexport default class Cryptocurrency extends Component {\n  render() {\n    var {\n        id,\n        name,\n        symbol,\n        price_usd,\n        percent_change_1h,\n        percent_change_24h,\n        percent_change_7d,\n    } = this.props.data;\n    // This is using a technique called object destructuring to assign 7 new variables the values inside this.props.data.\n\n    return (\n      <TickerItem>\n            <p>{name} ({symbol})</p>\n            <h1>${ (+price_usd).toFixed(2) }</h1>\n            <p>{percent_change_1h}% 1hr</p>\n            <p>{percent_change_24h}% 24hrs</p>\n            <p>{percent_change_7d}% 7days</p>\n      </TickerItem>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Cryptocurrency from './Cryptocurrency';\nimport axios from 'axios';\n\nconst TickerCont = styled.div` \n`;\n\nconst Tickeritems = styled.div` \nmax-width: 1168px;\nmargin:0 auto;\ndisplay: flex;\n`;\n\nconst Footer = styled.div `\n    max-width: 1168px;\n    text-align:center;\n    margin:0 auto;\n`\n\nexport default class Tickers extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data:[ \n                {\n                    id: \"bitcoin\",\n                    name: \"Bitcoin\",\n                    symbol: \"BTC\",\n                    price_usd: \"1\",\n                    percent_change_1h: \"0\",\n                    percent_change_24h: \"0\",\n                    percent_change_7d: \"0\",\n                },\n                {\n                    id: \"ethereum\",\n                    name: \"Ethereum\",\n                    symbol: \"ETH\",\n                    price_usd: \"1\",\n                    percent_change_1h: \"0\",\n                    percent_change_24h: \"0\",\n                    percent_change_7d: \"0\",\n                },\n                {\n                    id: \"litecoin\",\n                    name: \"Litecoin\",\n                    symbol: \"LTC\",\n                    price_usd: \"1\",\n                    percent_change_1h: \"0\",\n                    percent_change_24h: \"0\",\n                    percent_change_7d: \"0\",\n                }\n            ]\n        }\n    }\n\n\n    // realoadin gdata after 60 sec\n    componentDidMount() {\n        this.fetchCryptocurrencyData();\n        this.interval = setInterval(() => this.fetchCryptocurrencyData(), 60 * 1000);\n    }\n\n    // Getting data from the API,\n    fetchCryptocurrencyData() {\n        axios.get(\"https://api.coinmarketcap.com/v1/ticker/\")\n            .then(response => {\n                var wanted = [\"bitcoin\", \"ethereum\", \"litecoin\"];\n                var result = response.data.filter(currency => wanted.includes(currency.id));\n                this.setState({ data: result});\n            })\n            .catch(err => console.log(err));\n    }\n\n\n\n  render() {\n      let tickers = this.state.data.map((coine) => \n            <Cryptocurrency data= {coine}  key={coine.id}></Cryptocurrency>      \n      ) \n    return (\n      <TickerCont> \n        <Tickeritems>\n            {tickers}\n        </Tickeritems>\n        <Footer>\n          this is based on this tut <a href=\"https://sabe.io/tutorials/getting-started-with-react\">Link</a>\n        </Footer>\n      </TickerCont>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Tickers from './components/Tickers'\nconst Header = styled.div`\n  background: #eee;\n  text-align:center;\n  font-family:Arial, Helvetica, sans-serif;\n  font-size:18px;\n  padding: 20px;\n`\n \n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header  className=\"App-header\">\n          <h2>Cryptocurrency converter \n          </h2>\n        </Header>\n        <Tickers> \n        </Tickers>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}